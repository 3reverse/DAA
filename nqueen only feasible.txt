def is_safe(board, row, col, n):
    # Check if there is a queen in the same column
    for i in range(row):
        if board[i][col] == 'Q':
            return False

    # Check upper-left diagonal
    i, j = row, col
    while i >= 0 and j >= 0:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j -= 1

    # Check upper-right diagonal
    i, j = row, col
    while i >= 0 and j < n:
        if board[i][j] == 'Q':
            return False
        i -= 1
        j += 1

    return True

def solve_n_queens(board, row, n, count):
    if row == n:
        count[0] += 1
        return

    for col in range(n):
        if is_safe(board, row, col, n):
            board[row][col] = 'Q'
            solve_n_queens(board, row + 1, n, count)
            board[row][col] = '.'

def n_queens_possible_solutions(initial_arrangement):
    n = len(initial_arrangement)
    board = [['.' for _ in range(n)] for _ in range(n)]

    for col, val in enumerate(initial_arrangement):
        if val == 'Q':
            board[0][col] = 'Q'

    count = [0]
    solve_n_queens(board, 1, n, count)
    return (count[0] > 0), count[0]

# Example usage:
initial_arrangement = "Q......."
result, count = n_queens_possible_solutions(initial_arrangement)
print("Feasible Solution Exists:", result)
print("Feasible Solutions:", count)
